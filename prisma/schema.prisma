// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  account       Account?
  transactions  Transaction[]
  loans         Loan[]
  verificationCodes VerificationCode[]
}

model Account {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  accountNumber String    @unique
  balance       Float     @default(0)
  userId        String?    @unique @db.ObjectId
  user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactions  Transaction[]
  loans         Loan[]
}

model Transaction {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  type          TransactionType
  amount        Float
  description   String?
  accountId     String    @db.ObjectId
  account       Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  loanId        String?   @db.ObjectId
  loan          Loan?     @relation(fields: [loanId], references: [id])
}

model Loan {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float
  interestRate  Float     // Annual interest rate in percentage
  term          Int       // Loan term in months
  status        LoanStatus @default(PENDING)
  purpose       String?
  accountId     String    @db.ObjectId
  account       Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy    String?   @db.ObjectId
  approvedAt    DateTime?
  disbursedAt   DateTime?
  dueDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactions  Transaction[]
}

model Announcement {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  createdAt     DateTime  @default(now())
}

model VerificationCode {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  code          String
  type          VerificationType
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  used          Boolean   @default(false)
}

enum Role {
  ADMIN
  USER
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  TRANSFER
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  DISBURSED
  PAID
  DEFAULTED
}

enum VerificationType {
  REGISTRATION
  LOGIN
  PASSWORD_RESET
}

